<!-- Client-side (HTML) -->
<!DOCTYPE html>
<html>
<head>
    <title>WebRTC Video Call</title>
    <style>
         #localVideo, #remoteVideo {
             width: 480px;
             height: 360px;
             border: 1px solid #ccc;
             display: block;
             margin: 0 auto;
         }
         
         .controls {
             display: flex;
             justify-content: center;
             margin-top: 10px;
         }
         
         .controls button {
             margin: 0 10px;
         }
         
         #toggleVideo, #toggleAudio {
             background-color: transparent;
             border: none;
             cursor: pointer;
             font-size: 24px;
         }
         
         #toggleVideo:hover, #toggleAudio:hover {
             color: #333; /* Цвет иконки при наведении */
         }
    </style>
</head>
<body>
<input type="hidden" id="chatId" value="@ViewBag.ChatId"/>
<input type="hidden" id="senderId" value="@ViewBag.SenderId"/>
<video id="localVideo" autoplay muted poster="~/images/wait.jpg"></video>
<video id="remoteVideo" autoplay poster="~/images/wait.jpg"></video>
<div class="controls">
        <button id="toggleVideo"><i id ="videoIcon" class="fas fa-video" style="color: green;"></i></button>
        <button id="toggleAudio"><i id = "audioIcon" class="fas fa-microphone" style="color: green;" ></i></button>
    </div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder().withUrl("/webrtcHub").build();
        
        let messages = []
        connection.on("Receive",  (message) =>{
            var senderId = document.getElementById("senderId").value;
            if (message.senderid !== senderId){
            let msg = JSON.parse(message.message);
            console.log("RECEIVE")
            // Если это SDP
            if (msg.type === 'offer' || msg.type === 'answer') {
                pc.setRemoteDescription(new RTCSessionDescription(msg))
                    .then(() => {
                        // Если это предложение, мы должны создать ответ
                        if (msg.type === 'offer') {
                            pc.createAnswer().then((answer) => {
                                pc.setLocalDescription(answer);
                                var chatId = document.getElementById("chatId").value;
                                var senderId = document.getElementById("senderId").value;
                                var str = JSON.stringify(answer) ;
                                connection.invoke("Send",{id: chatId, senderId:senderId ,message: JSON.stringify(answer)} );
                                messages = [];
                             });
                        }
                    });
            }
            // Если это ICE кандидат
            else if (msg.candidate) {
                pc.addIceCandidate(new RTCIceCandidate(msg.candidate));
            }
            }
        });
        
        connection.start().then(() => {
            console.log("Connected to hub.");
            var chatId = document.getElementById("chatId").value; 
            console.log("Group" + chatId)// Получение tableId из модели
            connection.invoke("JoinChatGroup", chatId).catch(err => console.error(err.toString()));
            /*pc.onicecandidate = (event) => {
                    if (event.candidate) {
                        let chatId = document.getElementById("chatId").value;
                        console.log("Candidate "+chatId)
                        var str = JSON.stringify(event.candidate) ;
                        connection.invoke("Send", { message: str, id: chatId }).catch(err => console.error(err.toString()));
                        messages = [];
                    }
                };*/
            pc.onicecandidate = ({candidate}) => {
                                                var senderId = document.getElementById("senderId").value;

                connection.invoke("Send", { message: JSON.stringify({ candidate }), senderId:senderId, id: chatId }).catch(err => console.error(err.toString()));
  
            };
        
        // Send any ICE candidates to the other peer
            
        
        }).catch(err => console.error(err.toString()));
        let pc = new RTCPeerConnection();
        

        
        
        // Let's say we have a video element with the id "remoteVideo" for displaying the remote video stream
        let remoteVideo = document.getElementById("remoteVideo");
        
        pc.ontrack = (event) => {
            // Set the source of the video element to the stream received from the other peer
            remoteVideo.srcObject = event.streams[0];
        };
           
        // Получаем локальный медиапоток
        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                let localStream = stream;
                let localVideo = document.getElementById("localVideo");
                var chatId = document.getElementById("chatId").value;
                // Установите источник видеоэлемента на полученный поток
                localVideo.srcObject = stream;
                localStream.getTracks().forEach((track) => {
                    // Add our video/audio tracks to the connection
                    pc.addTrack(track, localStream);
                });
        
                console.log("Create offer")
                pc.createOffer().then((offer) => {
                                            pc.setLocalDescription(offer);
                                                                            var senderId = document.getElementById("senderId").value;

                                            connection.invoke("Send",{id: chatId, message: JSON.stringify(offer), senderId:senderId});
                                            messages = [];
                                        });
                // Create and send an offer to the other peer
             
        
                document.getElementById('toggleVideo').addEventListener('click', () => {
                    localStream.getVideoTracks()[0].enabled = !localStream.getVideoTracks()[0].enabled;
                    let videoIcon = document.getElementById('videoIcon');
                    if (localStream.getVideoTracks()[0].enabled) {
                        videoIcon.style.color = 'green';
                    } else {
                        videoIcon.style.color = 'red';
                    }
                });
                
                document.getElementById('toggleAudio').addEventListener('click', () => {
                    localStream.getAudioTracks()[0].enabled = !localStream.getAudioTracks()[0].enabled;
                    let audioIcon = document.getElementById('audioIcon');
                    if (localStream.getAudioTracks()[0].enabled) {
                        audioIcon.style.color = 'green';
                    } else {
                        audioIcon.style.color = 'red';
                    }
                });
            })
            .catch(error => {
                console.error('Error accessing media devices.', error);
            });
        
        window.onbeforeunload = function() {
            localStream.getTracks().forEach(track => track.stop());
            var chatId = parseInt(document.getElementById("chatId").value);
            connection.invoke("LeaveChatGroup", chatId).catch(err => console.error(err.toString()));
        };
    </script> <!-- Предполагается, что ваш JavaScript код WebRTC находится в этом файле -->
</body>
</html>